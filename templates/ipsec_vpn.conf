{#
    Template for creating AWS VPN tunnel via Ansible playbook. This assumes the device
    is a vSRX with a single routing-instance, multi routing-instance template will be done
    later. This template assumes dynamic routing with BGP. 
    This also does not create associated security policy.....yet.....
#}


security {
    ike {
        proposal aws-phase1 {
            authentication-method pre-shared-keys;
            dh-group group2;
            authentication-algorithm sha1;
            encryption-algorithm aes-128-cbc;
            lifetime-seconds 28800;
        }
        policy aws-phase1-policy {
                mode main;
                proposals aws-phase1;
                pre-shared-key ascii-text "{{aws_psk}}";
        }
        gateway aws-gateway {
            ike-policy aws-phase1-policy;
            address {{aws_gateway}};
            local-identity inet {{local_ike_gw}};
            external-interface {{external_interface}};
        }
    }
    ipsec {
        proposal aws-phase2 {
            protocol esp;
            authentication-algorithm {{p2_auth}};
            encryption-algorithm {{p2_encryption}};
            lifetime-seconds {{p2_lifetime}};
        }
        policy aws-phase2-policy {
            proposals aws-phase2;
            perfect-foward-secrecy {
                keys group2;
            }
        }
        vpn aws-vpn {
            bind-interface st0.{{tunnel_unit}};
            ike {
                gateway aws-gateway;
                ipsec-policy aws-phase2-policy;
            }
            establish-tunnels immediately;  
        }
    }
    zones {
        security-zone {{security_zone}} {
        interfaces {
            st0.{{tunnel_unit}};
            }
        }
    }
}
interfaces {
    st0 {
        unit {{tunnel_unit}} {
            family inet {
                address {{tunnel_address}};
            }
        }
    }
}
protocols {
    bgp {
        group aws-bgp {
            type external;
            peer-as {{aws_bgp_as}};
            description "AWS VPN Peering";
            local-address {{tunnel_address}};
            log-updown;
            export AWS-Allowed;
            neighbor {{bgp_remote}};
        }
    }
}
routing-options {
    autonomous-system {{local_as}};
}
policy-options {
    policy-statement AWS-Allowed {
        term AWS-Announce-Direct {
            from protocol direct;
            then accept;
        }
    }
}
